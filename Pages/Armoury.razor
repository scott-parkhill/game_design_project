@page "/armoury"
@attribute [Authorize(Roles = "StandardUser")]

@using Chaos.Models
@using Chaos.Business
@using Chaos.Models.ViewModels
@using Chaos.Extensions

@inject IGameDbService dbService
@inject IToastService toastService

@if (loading)
{
    <h1>Loading...</h1>
}
else if (error)
{
    <h1>Error</h1>
}
else
{
    <h1>Armoury</h1>
    <br />

    <div class="container">
        <div class="row">
            <div class="col">
                <div class="fs-5">Current Army Score</div>
                <div>@currentArmyScore</div>
            </div>
            <div class="col">
                <div class="fs-5">Coins</div>
                <div>@armyViewModel.Coins.PrettyPrintNumber()</div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="fs-5">New Army Score</div>
                <div>@newArmyScore</div>
            </div>
            <div class="col">
                <div class="fs-5">Coins After Purchases</div>
                <div>@newArmyCoins.PrettyPrintNumber()</div>
            </div>
        </div>
    </div>

    <br />
    <TabContainer>
        <TabSection Title="Offensive Weapons">
            @GetWeaponsList(ActionTypes.Offence)
        </TabSection>
        <TabSection Title="Defensive Weapons">
            @GetWeaponsList(ActionTypes.Defence)
        </TabSection>
        <TabSection Title="Sentry Weapons">
            @GetWeaponsList(ActionTypes.Sentry)
        </TabSection>
        <TabSection Title="Sapper Weapons">
            @GetWeaponsList(ActionTypes.Sapping)
        </TabSection>
    </TabContainer>

    <br />
    <button type="button" class="btn btn-primary mt-2" @onclick="Submit">Purchase Weapons</button>
}

@code
{
    [CascadingParameter(Name = "LoggedUserId")] string LoggedUserId { get; set; } = null!;
    List<WeaponPurchaseModel> weaponsPurchaseModel = new();
    Factions userFaction = Factions.None;
    ArmyViewModel armyViewModel = new();
    double currentArmyScore => ArmyScore.GetArmyScore(armyViewModel);
    double newArmyScore;
    int newArmyCoins;
    bool loading = true;
    bool error;

    protected override async Task OnInitializedAsync()
    {
        userFaction = await dbService.GetUserFaction(LoggedUserId);
        ArmyViewModel? avm = await dbService.GetArmyViewModel(LoggedUserId);

        if (avm is null)
        {
            error = true;
            return;
        }

        armyViewModel = avm;

        foreach (var (type, weapon) in Weapon.Weapons)
        {
            weaponsPurchaseModel.Add(new(type, weapon, 0));
        }

        newArmyScore = currentArmyScore;
        newArmyCoins = armyViewModel.Coins;

        loading = false;
    }

    void CalculateArmyChanges()
    {
        UserWeaponsData newUserWeaponsData = new();
        int costs = 0;

        foreach (var item in weaponsPurchaseModel)
        {
            costs += item.PurchaseCount * item.Weapon.Cost;
            UserWeapon newUserWeapon = new()
            {
                Count = item.PurchaseCount + armyViewModel.UserWeapons.UserWeapons.Where(u => u.WeaponType == item.WeaponType).Select(u => u.Count).FirstOrDefault(),
                WeaponType = item.WeaponType
            };

            newUserWeaponsData.UserWeapons.Add(newUserWeapon);
        }

        ArmyViewModel newArmyView = armyViewModel.Clone();
        newArmyView.UserWeapons = newUserWeaponsData; 

        newArmyScore = ArmyScore.GetArmyScore(newArmyView);
        newArmyCoins = armyViewModel.Coins - costs;
    }

    void ChangeValidation(ChangeEventArgs args, WeaponPurchaseModel model)
    {
        var result = Int32.TryParse(args?.Value.ToString() ?? "", out int value);

        if (result is false)
        {
            var name = model.Weapon.GetDisplayName(userFaction);
            model.PurchaseCount = 0; 
            toastService.ShowError($"Invalid purchase value for {name}.");
        }
        
        else if (value < 0)
        {
            model.PurchaseCount = 0;
            toastService.ShowError("Cannot purchase negative weapons.");
        }
        
        else
        {
            model.PurchaseCount = value;
            CalculateArmyChanges();
        }
    }

    RenderFragment GetWeaponsList(ActionTypes actionType)
    {
        var actionTypeWeapons = Weapon.GetWeaponsByActionType(actionType).Select(u => u.WeaponType).ToList();
        var purchaseList = weaponsPurchaseModel.Where(u => actionTypeWeapons.Contains(u.WeaponType)).ToList();

        return
            @<div class="container">
                <div class="col">
                    <div class="row d-flex align-items-center fs-5">
                        <div class="col">
                            Weapon Name
                        </div>
                        <div class="col">
                            Weapon Strength
                        </div>
                        <div class="col">
                            Currently Owned
                        </div>
                        <div class="col">
                            Cost
                        </div>
                        <div class="col">
                            Number to Purchase
                        </div>
                    </div>
                    @foreach(var model in purchaseList)
                    {
                        <div class="pt-2 row d-flex align-items-center">
                            <div class="col">
                                @model.Weapon.GetDisplayName(userFaction)
                            </div>
                            <div class="col">
                                @model.Weapon.Strength.PrettyPrintNumber()
                            </div>
                            <div class="col">
                                @(armyViewModel.UserWeapons.UserWeapons.Where(u => u.WeaponType == model.WeaponType).FirstOrDefault()?.Count ?? 0)
                            </div>
                            <div class="col">
                                @model.Weapon.Cost.PrettyPrintNumber()
                            </div>
                            <div class="col">
                                <input type="text" class="form-control" value="@model.PurchaseCount" @onchange="@(e => ChangeValidation(e, model))" />
                            </div>
                        </div>
                    }
                </div>
            </div>;
    }

    async Task Submit()
    {
        loading = true;
        if (weaponsPurchaseModel.Any(u => u.PurchaseCount < 0))
        {
            toastService.ShowError("Can't have negative purchase counts.");
            return;
        }

        var (result, message) = await dbService.UpdateUserWeapons(LoggedUserId, weaponsPurchaseModel.Select(u => (u.PurchaseCount, true, u.WeaponType)).ToArray());

        if (result != TaskResults.Success)
        {
            toastService.ShowError(message);
        }
        else
        {
            toastService.ShowSuccess(message);
            weaponsPurchaseModel.ForEach(u => u.PurchaseCount = 0);
        }
        loading = false;
    }

    class WeaponPurchaseModel
    {
        public WeaponTypes WeaponType { get; set; }
        public Weapon Weapon { get; set; } = null!;
        public int PurchaseCount { get; set; }

        public WeaponPurchaseModel(WeaponTypes weaponType, Weapon weapon, int purchaseCount) => (WeaponType, Weapon, PurchaseCount) = (weaponType, weapon, purchaseCount);
    }
}
