@page "/Identity/Account/Register"
@page "/register"
@namespace Chaos.Shared

@using System.ComponentModel.DataAnnotations
@using Chaos.Business
@using Chaos.Models.DbModels
@using Chaos.Services
@using Microsoft.AspNetCore.Identity
@using Chaos.Data
@using Microsoft.AspNetCore.DataProtection

@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authorizationStateProvider
@inject IToastService toastService
@inject IGameDbService dbService
@inject UserManager<GameUser> userManager
@inject SignInManager<GameUser> signInManager
@inject IDataProtectionProvider dataProtectionProvider

<h1>Registration</h1>

<EditForm Model="model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    @if (onFirstPage)
    {
        <div class="form-group">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="model.Email" />
            <ValidationMessage For="() => model.Email" />
        </div>

        <div class="form-group mt-2">
            <label>Username</label>
            <InputText class="form-control" @bind-Value="model.Username" />
            <ValidationMessage For="() => model.Username" />
        </div>

        <div class="form-group mt-2">
            <label>Password</label>
            <InputText class="form-control" type="password" @bind-Value="model.Password" />
            <ValidationMessage For="() => model.Password" />
        </div>
        
        <button type="button" class="btn btn-info mt-3" @onclick="Next">Next</button>
    }
    
    else if (onFactionPage)
    {
        <h3>Faction</h3>
        
        <div class="container">
            <div class="col-6">
                <InputSelect class="form-select" @bind-Value="model.Faction">
                    @foreach (var faction in Enum.GetValues<Factions>())
                    {
                        <option @key="faction" value="@faction">@(Enum.GetName<Factions>(faction))</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => model.Faction"/>
            </div>
            <div class="col-2">
                <button class="btn btn-success mt-3" type="submit">Register</button>
                <button class="btn btn-info mt-3 ms-1" type="button" @onclick="Back">Back</button>
            </div>
        </div>
        
        <br />
        
        <CardDeck Width="25rem">
            <Card Image="dolphin.png">
                <Title>Dolphins</Title>
                <Text>
                    Dolphins are a luscious species of aquatic mammal. They frolick in all the world's oceans, and are generally happy-go-lucky creatures.
                    <br /><br />
                    That is, until the pirates attacked...
                    <br /><br />
                    Since then, humans have begun to understand the true intelligence of dolphins, and their ability to match vicious act with horrendous act. Are you a dolphin?
                    <br /><br />
                    Dolphin Perks:
                    <ul>
                        <li>increased recruit rate by 20%</li>
                        <li>increased spy/sabotage and sentry skills by 5%</li>
                    </ul>
                </Text>
            </Card>
            <Card Image="pirate.png">
                <Title>Pirates</Title>
                <Text>
                    Pirates are a notorious bunch of folk, known for their volunteer work when it comes to harrassing the Royal Navy. Putting their lives at risk for the greater good, they were the single greatest anti-colonial threat to Spanish and English expansion on the seas.
                    <br /><br />
                    Pirates, however, while known for their wit are not known for their intelligence, and one day they decided, "hey, those funny swimming fuckers in the ocean there, let's merc them". And so they did. What they didn't realize is they were about to start the first and greatest interspecies war ever ever.
                    <br /><br />
                    Are you a pirate?
                    <br /><br />
                    Pirate Perks:
                    <ul>
                        <li>increased coin generation rate by 20%</li>
                        <li>increased attack and defence skills by 5%</li>
                    </ul>
                </Text>
            </Card>
        </CardDeck>
    }

</EditForm>

@code
{
    RegistrationModel model = new();

    bool onFirstPage = true;
    bool onFactionPage;

    void Back()
    {
        onFirstPage = true;
        onFactionPage = false;
    }

    void Next()
    {
        onFirstPage = false;
        onFactionPage = true;
    }

    async Task OnValidSubmit()
    {
        GameUser newUser = new()
        {
            Email = model.Email,
            UserName = model.Username,
            Faction = model.Faction
        };

        var result = await userManager.CreateAsync(newUser, model.Password);

        if (!result.Succeeded)
        {
            toastService.ShowError("An error occurred during account creation. Please try again.");
        }

        var user = await userManager.FindByEmailAsync(model.Email);

        if (user is null)
        {
            toastService.ShowError("An error occurred during account creation. Please try again.");
            return;
        }

        result = await userManager.AddToRoleAsync(user, "StandardUser");
        var armyResult = await dbService.AddArmy(user.Id);

        if (result.Succeeded && armyResult.Result is TaskResults.Success)
        {
            toastService.ShowSuccess("Account created!");
            await Task.Delay(1500);

            var token = await userManager.GenerateUserTokenAsync(user, TokenOptions.DefaultProvider, "SignIn");
            var data = $"{user.Id}|{token}|true";
            var protector = dataProtectionProvider.CreateProtector("SignIn");
            var protectedData = protector.Protect(data);

            navigationManager.NavigateTo("/account/signin?token=" + protectedData, forceLoad: true);
        }
        else
        {
            await userManager.DeleteAsync(user);
            toastService.ShowError("An error occurred during account creation. Please try again.");
        }
    }

    class RegistrationModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [Display(Description = "Username")]
        [StringLength(20, MinimumLength = 5, ErrorMessage = "{0} must be between {2} and {1} characters long.")]
        public string Username { get; set; } = "";

        [Required]
        [Display(Description = "Password")]
        [StringLength(20, MinimumLength = 5, ErrorMessage = "Password must be between 5 and 20 characters long.")]
        public string Password { get; set; } = "";

        [Display(Description = "Faction")]
        [RequireEnumNotNone(ErrorMessage = "Must choose a faction.")]
        public Factions Faction { get; set; } = Factions.None;
    }
}
