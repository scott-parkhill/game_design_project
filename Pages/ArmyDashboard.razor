@page "/army-dashboard"
@attribute [Authorize(Roles = "StandardUser")]

@using Chaos.Models.ViewModels
@using Chaos.Business

@inject IGameDbService dbService
@inject IToastService toastService
@inject NavigationManager navigationManager

@if (loading)
{
    <h1>Loading...</h1>
}

else if (error)
{
    <h1>An error has occurred.</h1>
}

else
{
    <h1>@($"{Username}'s Army")</h1>

    <TabContainer>
        <TabSection Title="Army Administration">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Coin</th>
                        <th scope="col">Coin Generation Rate</th>
                        <th scope="col">Recruitment Rate</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@userArmy.Coins</td>
                        <td>@userArmy.CoinGenerationRate per day</td>
                        <td>@userArmy.RecruitRate per day</td>
                    </tr>
                </tbody>
            </table>
        </TabSection>
        <TabSection Title="Army Status">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Recruits</th>
                        <th scope="col">Attackers</th>
                        <th scope="col">Defenders</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@userArmy.Recruits</td>
                        <td>@userArmy.Attackers</td>
                        <td>@userArmy.Defenders</td>
                    </tr>
                </tbody>
            </table>
        </TabSection>
        <TabSection Title="Training">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Recruits Available</th>
                        <th scope="col">New Attackers</th>
                        <th scope="col">New Defenders</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@numUnusedRecruits</td>
                        <td>
                            <div class="d-flex flex-col">
                                @numNewAttackers
                                <div class="oi oi-arrow-top pl-2" @onclick="IncreaseAttackers" />
                                <div class="oi oi-arrow-bottom" @onclick="DecreaseAttackers" />
                            </div>
                        </td>
                        <td>
                            <div class="d-flex flex-col">
                                @numNewDefenders
                                <div class="oi oi-arrow-top pl-2" @onclick="IncreaseDefenders" />
                                <div class="oi oi-arrow-bottom" @onclick="DecreaseDefenders" />
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>

            <button type="button" class="btn btn-primary" @onclick="SubmitArmyChanges">Submit</button>

        </TabSection>
    </TabContainer>
}

@code
{
    [CascadingParameter(Name = "LoggedUserId")] protected string LoggedUserId { get; set; } = null!;
    [CascadingParameter(Name = "Username")] protected string Username { get; set; } = null!;

    ArmyViewModel userArmy = new();
    int numUnusedRecruits => userArmy.Recruits - numNewAttackers - numNewDefenders;
    int numNewAttackers;
    int numNewDefenders;

    bool loading = true;
    bool error;

    protected override async Task OnInitializedAsync()
    {
        if (LoggedUserId is null)
            navigationManager.NavigateTo(Utility.NotAuthorized);

        var armyResult = await dbService.GetArmyViewModel(LoggedUserId!);

        if (armyResult is null)
        {
            error = true;
            loading = false;
            return;
        }

        userArmy = armyResult;

        await dbService.UpdateArmies();

        loading = false;
    }

    void IncreaseAttackers()
    {
        if (numUnusedRecruits - 1 >= 0)
            ++numNewAttackers;
    }

    void DecreaseAttackers()
    {
        if (numNewAttackers > 0)
            --numNewAttackers;
    }

    void IncreaseDefenders()
    {
        if (numUnusedRecruits - 1 >= 0)
            ++numNewDefenders;
    }

    void DecreaseDefenders()
    {
        if (numNewDefenders > 0)
            --numNewDefenders;
    }

    async Task SubmitArmyChanges()
    {
        var (result, message) = await dbService.TrainRecruits(LoggedUserId, numNewAttackers, numNewDefenders);

        if (result != TaskResults.Success)
        {
            toastService.ShowError(message);
        }
        else
        {
            toastService.ShowSuccess(message);
            userArmy = await dbService.GetArmyViewModel(LoggedUserId!) ?? new();
            numNewAttackers = 0;
            numNewDefenders = 0;
        }
    }

    class TrainingModel
    {
        public int Attackers { get; set; }
        public int Defenders { get; set; }
    }
}
