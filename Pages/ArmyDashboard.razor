@page "/army-dashboard"
@attribute [Authorize(Roles = "StandardUser")]

@using Chaos.Models.ViewModels
@using Chaos.Business

@inject IGameDbService dbService
@inject IToastService toastService
@inject NavigationManager navigationManager

@if (loading)
{
    <h1>Loading...</h1>
}

else if (error)
{
    <h1>An error has occurred.</h1>
}

else
{
    <h1>@($"{Username}'s Army")</h1>

    <TabContainer>
        <TabSection Title="Army Administration">
            <table class="table">
                <thead>
                <tr>
                    <th scope="col">Coin</th>
                    <th scope="col">Coin Generation Rate</th>
                    <th scope="col">Recruitment Rate</th>
                    <th scope="col">Overall Army Strength</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>@userArmy.Coins</td>
                    <td>@(userArmy.CoinGenerationRate * generationRate) per day</td>
                    <td>@(userArmy.RecruitRate * generationRate) per day</td>
                    <td>@armyScore</td>
                </tr>
                </tbody>
            </table>
        </TabSection>
        <TabSection Title="Army Status">
            <table class="table">
                <thead>
                <tr>
                    <th scope="col">Recruits</th>
                    <th scope="col">Attackers</th>
                    <th scope="col">Defenders</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>@userArmy.Recruits</td>
                    <td>@userArmy.Attackers</td>
                    <td>@userArmy.Defenders</td>
                </tr>
                </tbody>
            </table>
        </TabSection>
        <TabSection Title="Training">
            <EditForm Model="trainingModel" OnValidSubmit="SaveArmyChanges">
                <DataAnnotationsValidator />
                Recruits Available: @numUnusedRecruits
                <br />
                <br />
                New Attackers: 
                <InputNumber class="form-control" @bind-Value="trainingModel.Attackers" />
                <ValidationMessage For="() => trainingModel.Attackers" />
                <br />
                New Defenders:
                <InputNumber class="form-control" @bind-Value="trainingModel.Defenders" />
                <ValidationMessage For="() => trainingModel.Defenders" />
                <br />
                New Sappers:
                <InputNumber class="form-control" @bind-Value="trainingModel.Sappers" />
                <ValidationMessage For="() => trainingModel.Sappers" />
                <br />
                New Sentries:
                <InputNumber class="form-control" @bind-Value="trainingModel.Sentries" />
                <ValidationMessage For="() => trainingModel.Sentries" />
                <br />
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>

        </TabSection>
        <TabSection Title="After Action Reports" OnClicked="StopShowingReport">
            @if (!showingReport)
            {
                <table class="table">
                    <thead>
                    <tr>
                        <td>Battle Time</td>
                        <td>Aggressor Name</td>
                        <td>Defender Name</td>
                        <td>Outcome</td>
                    </tr>
                    </thead>
                    <tbody>
                    @if (afterActionReports.Count == 0)
                    {
                        <tr>
                            <td>No reports.</td>
                            <td>N/A</td>
                            <td>N/A</td>
                            <td>N/A</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var report in afterActionReports)
                        {
                            <tr @key="report" style="cursor:pointer" @onclick="() => ShowReport(report)">
                                <td>@($"{report.BattleTime.ToShortDateString()} {report.BattleTime.ToShortTimeString()} UTC")</td>
                                <td>@aggressor</td>
                                <td>@defender</td>
                                <td>@report.Outcome</td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            }
            else
            {
                <br />
                <button class="btn btn-info" @onclick="StopShowingReport">Back</button>
                <ActionReportViewer ReportId="reportId" ReportType="ReportTypes.AfterActionReport" />
            }
        </TabSection>
        <TabSection Title="Spy Reports" OnClicked="StopShowingReport">
            @if (!showingReport)
            {
                <table class="table">
                    <thead>
                    <tr>
                        <td>Battle Time</td>
                        <td>Sapper Name</td>
                        <td>Sentry Name</td>
                        <td>Outcome</td>
                    </tr>
                    </thead>
                    <tbody>
                    @if (spyReports.Count == 0)
                    {
                        <tr>
                            <td>No reports.</td>
                            <td>N/A</td>
                            <td>N/A</td>
                            <td>N/A</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var report in spyReports)
                        {
                            <tr @key="report" style="cursor:pointer" @onclick="() => ShowReport(report)">
                                <td>@($"{report.SpyTime.ToShortDateString()} {report.SpyTime.ToShortTimeString()} UTC")</td>
                                <td>@aggressor</td>
                                <td>@defender</td>
                                <td>@report.Outcome</td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            }
            else
            {
                <br />
                <button class="btn btn-info" @onclick="StopShowingReport">Back</button>
                <ActionReportViewer ReportId="reportId" ReportType="ReportTypes.SpyReport" />
            }
        </TabSection>
    </TabContainer>
}

@code
{
    [CascadingParameter(Name = "LoggedUserId")] protected string LoggedUserId { get; set; } = null!;
    [CascadingParameter(Name = "Username")] protected string Username { get; set; } = null!;

    ArmyViewModel userArmy = new();
    int numUnusedRecruits => userArmy.Recruits - trainingModel.Attackers - trainingModel.Defenders;
    Factions userFaction = Factions.None;

    List<AfterActionReportViewModel> afterActionReports = new();
    List<SpyReportViewModel> spyReports = new();

    TrainingModel trainingModel = new();

    double armyScore => ArmyScore.GetArmyScore(userArmy, userFaction);
    double generationRate => Utility.GenerationMultiplier(armyScore);

    bool loading = true;
    bool error;
    bool showingReport;
    int reportId;
    string aggressor = "";
    string defender = "";

    protected override async Task OnInitializedAsync()
    {
        if (LoggedUserId is null)
        {
            navigationManager.NavigateTo(Utility.NotAuthorized);
            return;
        }

        userFaction = await dbService.GetUserFaction(LoggedUserId);
        var armyResult = await dbService.GetArmyViewModel(LoggedUserId);

        if (armyResult is null)
        {
            error = true;
            loading = false;
            return;
        }

        userArmy = armyResult;

        afterActionReports = await dbService.GetAfterActionReports(LoggedUserId);
        spyReports = await dbService.GetSpyReports(LoggedUserId);

        loading = false;
    }

    void StopShowingReport() => showingReport = false;

    async Task ShowReport(AfterActionReportViewModel report)
    {
        (aggressor, defender) = await dbService.GetBelligerents(report.AggressorId, report.DefenderId);
        reportId = report.Id;
        showingReport = true;
    }
    
    async Task ShowReport(SpyReportViewModel report)
    {
        (aggressor, defender) = await dbService.GetBelligerents(report.SapperId, report.SentryId);
        reportId = report.Id;
        showingReport = true;
    }

    async Task SaveArmyChanges()
    {
        var (result, message) = await dbService.TrainRecruits(LoggedUserId, trainingModel.Attackers, trainingModel.Defenders, trainingModel.Sentries, trainingModel.Sappers);

        if (result is TaskResults.Failure)
        {
            toastService.ShowError(message);
        }
        else if (result is TaskResults.Invalid)
        {
            toastService.ShowInfo(message);
        }
        else
        {
            toastService.ShowSuccess(message);
            userArmy = await dbService.GetArmyViewModel(LoggedUserId!) ?? new();
            trainingModel = new();
            StateHasChanged();
        }
    }

    class TrainingModel
    {
        [RequiredNotNegative(ErrorMessage = "Can't recruit negative attackers.")]
        public int Attackers { get; set; }

        [RequiredNotNegative(ErrorMessage = "Can't recruit negative defenders.")]
        public int Defenders { get; set; }
        
        [RequiredNotNegative(ErrorMessage = "Can't recruit negative sappers.")]
        public int Sappers { get; set; }
        
        [RequiredNotNegative(ErrorMessage = "Can't recruit negative sentries.")]
        public int Sentries { get; set; }
    }
}
