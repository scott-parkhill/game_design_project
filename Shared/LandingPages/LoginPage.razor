@page "/login"
@namespace Chaos.Shared

@using Chaos.Models.DbModels
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.DataProtection

@inject UserManager<GameUser> userManager
@inject SignInManager<GameUser> signInManager
@inject IToastService toastService
@inject NavigationManager navigationManager
@inject IDataProtectionProvider dataProtectionProvider

<h1>Login</h1>

<EditForm Model="login" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Username</label>
        <InputText class="form-control" @bind-Value="login.Username" />
        <ValidationMessage For="() => login.Username" />
    </div>

    <div class="form-group mt-2">
        <label>Password</label>
        <InputText class="form-control" @bind-Value="login.Password" />
        <ValidationMessage For="() => login.Password" />
    </div>

    <button class="btn btn-primary mt-3" type="submit">Login</button>

</EditForm>

@code
{
    UserLoginModel login = new();

    async Task OnValidSubmit()
    {
        var user = await userManager.FindByNameAsync(login.Username);

        if (user is null)
        {
            toastService.ShowError("No user by that username exists.");
            return;
        }

        if (await userManager.CheckPasswordAsync(user, login.Password))
        {
            toastService.ShowSuccess("Successfully logged in.");
            var token = await userManager.GenerateUserTokenAsync(user, TokenOptions.DefaultProvider, "SignIn");
            var data = $"{user.Id}|{token}|true";
            var protector = dataProtectionProvider.CreateProtector("SignIn");
            var protectedData = protector.Protect(data);

            navigationManager.NavigateTo("/account/signin?token=" + protectedData, forceLoad: true);
        }

        else
        {
            toastService.ShowSuccess("Login failed.");
        }
    }

    class UserLoginModel
    {
        [Required]
        [StringLength(30, ErrorMessage = "Username is too long.")]
        public string Username { get; set; } = "";

        [Required]
        [StringLength(30, ErrorMessage = "Password is too long.")]
        public string Password { get; set; } = "";
    }
}
