@using Chaos.Models.ViewModels
@using Chaos.Business

@inject IGameDbService dbService

@if (loading)
{
    <h1>Loading...</h1>
}
else if (error)
{
    <h1>Error...</h1>
}
else
{
    @if (spyReport is not null)
    {
        <table class="table">
            <thead>
            <tr>
                <td>Time of Action</td>
                <td>Sapper Name</td>
                <td>Sentry Name</td>
                <td>Outcome</td>
                <td>Sapper Strength</td>
                <td>Sentry Minimum Defence</td>
                <td>Sentry Maximum Defence</td>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>@($"{spyReport.SpyTime.ToShortDateString()} {spyReport.SpyTime.ToShortTimeString()} UTC")</td>
                <td>@aggressorName</td>
                <td>@defenderName</td>
                <td>@spyReport.Outcome</td>
                <td>@spyReport.SapperStrength</td>
                @if (spyReport.SentryMaximumDefence == 0 && spyReport.SentryMinimumDefence == 0)
                {
                    <td>N/A</td>
                    <td>N/A</td>
                }
                else
                {
                    <td>@spyReport.SentryMinimumDefence</td>
                    <td>@spyReport.SentryMaximumDefence</td>
                }
            </tr>
            </tbody>
        </table>
        
        <br />
        
        <table class="table">
            <thead>
                <tr>
                    <td>Sapper Sapper Losses</td>
                    <td>Sapper Recruit Losses</td>
                    <td>Sentry Sentry Losses</td>
                    <td>Sentry Recruit Losses</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@spyReport.SapperSapperLosses</td>
                    <td>@spyReport.SapperRecruitLosses</td>
                    <td>@spyReport.SentrySentryLosses</td>
                    <td>@spyReport.SentryRecruitLosses</td>
                </tr>
            </tbody>
        </table>
    }
    else if (afterActionReport is not null)
    {   
        <table class="table">
            <thead>
                <tr>
                    <td>Battle Time</td>
                    <td>Aggressor Name</td>
                    <td>Defender Name</td>
                    <td>@currencyName Stolen</td>
                    <td>Outcome</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@($"{afterActionReport.BattleTime.ToShortDateString()} {afterActionReport.BattleTime.ToShortTimeString()} UTC")</td>
                    <td>@aggressorName</td>
                    <td>@defenderName</td>
                    <td>@afterActionReport.AggressorCoinGains</td>
                    <td>@afterActionReport.Outcome</td>
                </tr>
            </tbody>
        </table>
        
        <br />
        
        <table class="table">
            <thead>
                <tr>
                    <td>Aggressor Recruit Losses</td>
                    <td>Aggressor Attacker Losses</td>
                    <td>Defender Recruit Losses</td>
                    <td>Defender Defender Losses</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@afterActionReport.AggressorRecruitLosses</td>
                    <td>@afterActionReport.AggressorAttackerLosses</td>
                    <td>@afterActionReport.DefenderRecruitLosses</td>
                    <td>@afterActionReport.DefenderDefenderLosses</td>
                </tr>
            </tbody>
        </table>
    }
    
    <br/>
    
    <h3>Weapon Losses</h3>
    <TabContainer>
        <TabSection Title="Aggressor Weapon Losses">
            <UserWeaponsDisplay UserId="@(spyReport != null ? spyReport.SapperId : afterActionReport!.AggressorId)" ShowAsWeaponsLost Data="@(spyReport != null ? spyReport.SapperToolsLost : afterActionReport!.AggressorToolsLost)"></UserWeaponsDisplay>
        </TabSection>
        <TabSection Title="Defender Weapon Losses">
            <UserWeaponsDisplay UserId="@(spyReport != null ? spyReport.SentryId : afterActionReport!.DefenderId)" ShowAsWeaponsLost Data="@(spyReport != null ? spyReport.SentryToolsLost : afterActionReport!.DefenderToolsLost)"></UserWeaponsDisplay>
        </TabSection>
    </TabContainer>
}

@code
{
    [CascadingParameter(Name = "LoggedUserId")] string LoggedUserId { get; set; } = null!;
    [Parameter, EditorRequired] public int ReportId { get; set; }
    [Parameter, EditorRequired] public ReportTypes ReportType { get; set; } = ReportTypes.None;

    SpyReportViewModel? spyReport;
    AfterActionReportViewModel? afterActionReport;

    string aggressorName = "";
    string defenderName = "";

    string currencyName = "";

    bool loading = true;
    bool error;

    protected override async Task OnInitializedAsync()
    {
        switch (ReportType)
        {
            case ReportTypes.AfterActionReport:
                afterActionReport = await dbService.GetAfterActionReport(ReportId);
                if (afterActionReport is null)
                {
                    loading = false;
                    error = true;
                    return;
                }
                await GetCoinName();
                (aggressorName, defenderName) = await dbService.GetBelligerents(afterActionReport.AggressorId, afterActionReport.DefenderId);
                break;
            case ReportTypes.SpyReport:
                spyReport = await dbService.GetSpyReport(ReportId);
                if (spyReport is null)
                {
                    loading = false;
                    error = true;
                    return;
                }
                (aggressorName, defenderName) = await dbService.GetBelligerents(spyReport.SapperId, spyReport.SentryId);
                break;
            default:
                loading = false;
                error = true;
                return;
        }
        

        loading = false;
    }

    async Task GetCoinName()
    {
        var faction = await dbService.GetUserFaction(afterActionReport!.DefenderId);

        currencyName = faction is Factions.Dolphins ? Utility.DolphinCurrency : Utility.PirateCurrency;
    }
}
